// ReadMe_Tugas2

# Tugas 2
# eFootball-shop
# Kolaborator: Jonathan Hans Emanuelle

Nama : Anderson Tirza Liman

NPM : 2406355893

Kelas : PBP B

Tautan: https://anderson-tirza-efootballshop.pbp.cs.ui.ac.id/

1. Jelaskan bagaimana cara kamu mengimplementasikan checklist di atas secara step-by-step.
Jawab:
    Secara jujur, saya masih agak kesulitan dalam mengimplementasikan checklist, akan tetapi saya berhasil menavigasi kesulitan saya dan menyelesaikan tugas ini. 
    1. Pertama-tama, saya membuat sebuah repository di GitHub sebagai langkah awal. Saya menamai repository tersebut efootball-shop.
    2. Kemudian, karena saya sudah menginstall Django, saya kemudian membuat sebuah direktori baru untuk proyek ini, dan mengaktifkan virtual environent.
    3. Setelah itu, saya menyiapkan depemdencies dan menginstallnya agar bisa membuat sebuah proyek pada Django.
    4. Saya memulai proyek Django setelah semua requirements selesai diunduh
    5. Kemudian saya melakukan set up pada web PWS, mengatur environsnya beserta credentialsnya.
    6. Saya juga mengatur url yang akan dibuat. Saya hendak memastikan bahwa tahap ini membuahkan sebuah webpage yang menyatakan bahwa saya sudah berhasil.
    7. Setelah memastikan website bisa berjalan, saya membuat sebuah direktori baru bernama main.
    8. Pada main, saya melengkapi semua keperluannya, termasuk migrations dan templatenya untuk ditampilkan di webpage.
    9. Saya juga mengubah urls.py dengan menginclude "main.urls" agar routing bisa berjalan dengan baik, dan aplikasi main dapat tampak di webpage
    10. Models menjadi tahap yang patut dimodifikasi dalam tugas ini. Saya menambahkan beberapa hal di models.py saya, semua kebutuhan tugas saya masukkan: model bernama Product, atributnya antara lain: name, price, description, thumbail, category, dan is_featured. Adapun, saya juga menambahkan beberapa attribut lain, seperti stock dan rating. Category choices juga saya update dan sekarang ada beberapa pilihan.
    11. Tanpa kehadiran views.py, tampilan HTML yang saya buat tidak dapat tampil. Saya mengubah views.py pada direktori main dengan menambahkan identitas, dan mereturn request agar webpage dapat tampak
    12. Pada urls.py, saya menambahkan urlpatterns dan import show_main agar dapat memetakan fungsi yang telah dibuat di views.py, alias webpagenya benar-benar menampilkan tulisan identitas.
    13. Setelah selesai mengerjakan semua, saya melakukan git add, commit, dan push. Kemudian, saya juga melakukan test dan pengecekan deployment. Deployment berhasil dan webpage berhasil menampilkan judul proyek, nama, npm, dan kelas saya.

2. Buatlah bagan yang berisi request client ke web aplikasi berbasis Django beserta responnya dan jelaskan pada bagan tersebut kaitan antara urls.py, views.py, models.py, dan berkas html.

    Referensi gambar bagan, terinspirasi dari kolaborator, Jonathan Hans E.
    https://1.bp.blogspot.com/-u-n0WYPhc3o/X9nFtvNZB-I/AAAAAAAADrE/kD5gMaz4kNQIZyaUcaJJFVpDxdKrfoOwgCLcBGAsYHQ/s602/3.%2BPython%2BDjango%2B-%2BModul%2B2_Page2_Image5.jpg (Link bagan, diambil dari tutorial/lab 1 di website: https://pbp-fasilkom-ui.github.io/ganjil-2023/assignments/tutorial/tutorial-1/)
    Atau jika dirangkum,

    [Client Browser]
        │
        ▼  meminta request (Request dari user, misalnya untuk akses URL)
    urls.py (URLconf)
        │   Mencocokkan pola URL
        ▼
    views.py (View Function/Class)
        │  Menangani logika aplikasi
        │  bisa juga meminta data dari models.py (opsional)
        ▼
    models.py (Model)
        │  menangani Query / transaksi data ke database
        ▼
    Database 
        │ transaksi data
        ▼
    models.py 
        │ kembali ke views.py dengan hasil query
        ▼
    views.py 
        │  memilih template
        ▼
    templates/*.html (Template)
        │
        ▼
    [Client Browser] Response berupa halaman HTML ditampilkan

    Penjelasan:
    - urls.py
    * Berfungsi sebagai router.
    * Mencocokkan pola URL dari request client dengan fungsi/class view yang sesuai.

    - views.py
    * Menjadi perantara antara request client, model, dan template.
    * Bisa saja hanya mengembalikan HTML sederhana, atau mengambil data dari database melalui model. Setelah data siap, view akan memilih template yang tepat dan memberikan context data.

    - models.py
    * Mendefinisikan struktur data (tabel di database) serta interaksi dengan database menggunakan ORM Django.
    * View memanggil model ketika perlu menambah, mengambil, mengubah, atau menghapus data.
    * Data hasil query dikembalikan lagi ke view.

    - templates (HTML)
    * Bertugas menampilkan data dalam bentuk yang ramah pengguna.
    * Template menggunakan context dari view (misalnya {{ name }} atau {{ product_list }}) untuk di-render menjadi HTML akhir.
    * HTML ini kemudian dikirim sebagai response ke browser.

    - Database
    * Menyimpan data aplikasi secara persisten.
    * Django ORM pada models.py akan menerjemahkan instruksi Python menjadi query SQL yang dijalankan di database.
    * Memnungkinkan transaksi data dengan models.py

3. Jelaskan peran settings.py dalam proyek Django!
    File settings.py adalah pusat kendali utama dalam proyek Django. File ini pertama kali dibaca saat aplikasi dijalankan dan menentukan bagaimana seluruh komponen bekerja agar sinergi terbentuk dengan baik. Di dalamnya terdapat konfigurasi penting seperti kunci rahasia (SECRET_KEY), debug mode, daftar aplikasi (INSTALLED_APPS), middleware, database, lokasi template dan static file, hingga aturan keamanan.
    Tanpa settings.py, Django tidak dapat menentukan pilihan database, penentuan aplikasi yang aktif, bahkan daftar domain yang boleh mengakses. Berkas tersebut memastikan semua bagian bisa berjalan dengan aturan dan kesepakatan yang konsisten.
    settings.py adalah otak pengaturan proyek Django karena semua keputusan dasar tentang jalannya aplikasi, baik di tahap development maupun production, ditentukan olehnya.

4. Bagaimana cara kerja migrasi database di Django?
    Migrasi di Django adalah sebuah cara kerja atau mekanisme untuk menjaga struktur database agar selalu sesuai dengan definisi model pada models.py. Prosesnya cukup sederhana, yakni setiap kali ada perubahan pada model (terjadi penambahan data, atau perubahan tabel), Django akan mencatat perubahan itu ke dalam file migrasi menggunakan perintah makemigrations. File migrasi tersebut berisi instruksi yang menjelaskan apa saja perubahan yang harus dilakukan pada database.
    Ketika perintah migrate dijalankan, Django membaca file migrasi tersebut dan mengeksekusi instruksi SQL yang sesuai agar database diperbarui secara tepat. Dengan cara ini, developer tidak perlu menulis query SQL secara manual, melainkan cukup mengandalkan ORM Django yang mengubah model Python menjadi tabel database yang konsisten dan tertata.
    Migrasi dalam konteks Django adalah penghubung peubahan logika data dalam aplikasi dengan kode Pyhton (models.py) sehingga semua perubahan logika aplikasi up-to-date di databasenya.

5. Menurut Anda, dari semua framework yang ada, mengapa framework Django dijadikan permulaan pembelajaran pengembangan perangkat lunak?

    Menurut saya, Django dijadikan permulaan pembelajaran pengembangan perangkat lunak karena dua hal basic:
    Pertama, urusan bahasa. Bahasa yang dipakai Django adalah Python dengan penggunaannya yang relatif mudah, dipahami secara cepat oleh pemula, sintaks yang sederhana, tapi tetap kuat untuk building real projects.

    Kedua, menurut saya karena fitur Django yang lengkap dan supportif terhadap pemula. Framework Django sudah menyediakan hampir semua kebutuhan dasar web development, seperti routing, ORM Django, template engine, autentikasi, hingga admin panel.

    Dengan kombinasi keduanya, mahasiswa pemula atau developer baru bisa belajar konsep pengembangan aplikasi tanpa harus membangun semuanya dari nol. Django juga punya dokumentasi yang rapi dan komunitas besar, sehingga lebih ramah untuk dipelajari dibanding framework lain yang lebih kompleks bagi pemula.

6. Apakah ada feedback untuk asisten dosen tutorial 1 yang telah kamu kerjakan sebelumnya?
    Sebenarnya bagi saya untuk konten materi tidak masalah, akan tetapi saya juga mengharapkan pengajaran fundamental dari ajakan/langkah-langkah dalam tutorial, agar bisa coding yang paham akan tujuan.